package ca.alina.to_dolist.database.schema;

import org.greenrobot.greendao.annotation.*;

import java.util.List;
import ca.alina.to_dolist.database.schema.DaoSession;
import org.greenrobot.greendao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit.

/**
 * Entity mapped to table "TASK".
 */
@Entity(active = true)
public class Task {

    @Id
    private Long id;

    @NotNull
    private String name;

    @NotNull
    private String notes;

    @NotNull
    private java.util.Date startTime;
    private java.util.Date endTime;
    private java.util.Date dueDate;
    private java.util.Date markedDoneTime;
    private boolean isDone;
    private boolean isHidden;
    private boolean isAlarm;
    private boolean isRecurring;
    private String recurrenceRule;

    /** Used to resolve relations */
    @Generated
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    @Generated
    private transient TaskDao myDao;

    @ToMany(joinProperties = {
        @JoinProperty(name = "id", referencedName = "taskId")
    })
    private List<Notif> notifs;

    @Generated
    public Task() {
    }

    public Task(Long id) {
        this.id = id;
    }

    @Generated
    public Task(Long id, String name, String notes, java.util.Date startTime, java.util.Date endTime, java.util.Date dueDate, java.util.Date markedDoneTime, boolean isDone, boolean isHidden, boolean isAlarm, boolean isRecurring, String recurrenceRule) {
        this.id = id;
        this.name = name;
        this.notes = notes;
        this.startTime = startTime;
        this.endTime = endTime;
        this.dueDate = dueDate;
        this.markedDoneTime = markedDoneTime;
        this.isDone = isDone;
        this.isHidden = isHidden;
        this.isAlarm = isAlarm;
        this.isRecurring = isRecurring;
        this.recurrenceRule = recurrenceRule;
    }

    /** called by internal mechanisms, do not call yourself. */
    @Generated
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getTaskDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    @NotNull
    public String getName() {
        return name;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setName(@NotNull String name) {
        this.name = name;
    }

    @NotNull
    public String getNotes() {
        return notes;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setNotes(@NotNull String notes) {
        this.notes = notes;
    }

    @NotNull
    public java.util.Date getStartTime() {
        return startTime;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setStartTime(@NotNull java.util.Date startTime) {
        this.startTime = startTime;
    }

    public java.util.Date getEndTime() {
        return endTime;
    }

    public void setEndTime(java.util.Date endTime) {
        this.endTime = endTime;
    }

    public java.util.Date getDueDate() {
        return dueDate;
    }

    public void setDueDate(java.util.Date dueDate) {
        this.dueDate = dueDate;
    }

    public java.util.Date getMarkedDoneTime() {
        return markedDoneTime;
    }

    public void setMarkedDoneTime(java.util.Date markedDoneTime) {
        this.markedDoneTime = markedDoneTime;
    }

    public boolean getIsDone() {
        return isDone;
    }

    public void setIsDone(boolean isDone) {
        this.isDone = isDone;
    }

    public boolean getIsHidden() {
        return isHidden;
    }

    public void setIsHidden(boolean isHidden) {
        this.isHidden = isHidden;
    }

    public boolean getIsAlarm() {
        return isAlarm;
    }

    public void setIsAlarm(boolean isAlarm) {
        this.isAlarm = isAlarm;
    }

    public boolean getIsRecurring() {
        return isRecurring;
    }

    public void setIsRecurring(boolean isRecurring) {
        this.isRecurring = isRecurring;
    }

    public String getRecurrenceRule() {
        return recurrenceRule;
    }

    public void setRecurrenceRule(String recurrenceRule) {
        this.recurrenceRule = recurrenceRule;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    @Generated
    public List<Notif> getNotifs() {
        if (notifs == null) {
            __throwIfDetached();
            NotifDao targetDao = daoSession.getNotifDao();
            List<Notif> notifsNew = targetDao._queryTask_Notifs(id);
            synchronized (this) {
                if(notifs == null) {
                    notifs = notifsNew;
                }
            }
        }
        return notifs;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    @Generated
    public synchronized void resetNotifs() {
        notifs = null;
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#delete(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void delete() {
        __throwIfDetached();
        myDao.delete(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#update(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void update() {
        __throwIfDetached();
        myDao.update(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#refresh(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void refresh() {
        __throwIfDetached();
        myDao.refresh(this);
    }

    @Generated
    private void __throwIfDetached() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
    }

}
