package ca.alina.to_dolist.database.schema;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TASK".
*/
public class TaskDao extends AbstractDao<Task, Long> {

    public static final String TABLENAME = "TASK";

    /**
     * Properties of entity Task.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Notes = new Property(2, String.class, "notes", false, "NOTES");
        public final static Property StartTime = new Property(3, java.util.Date.class, "startTime", false, "START_TIME");
        public final static Property EndTime = new Property(4, java.util.Date.class, "endTime", false, "END_TIME");
        public final static Property DueDate = new Property(5, java.util.Date.class, "dueDate", false, "DUE_DATE");
        public final static Property MarkedDoneTime = new Property(6, java.util.Date.class, "markedDoneTime", false, "MARKED_DONE_TIME");
        public final static Property IsDone = new Property(7, boolean.class, "isDone", false, "IS_DONE");
        public final static Property IsHidden = new Property(8, boolean.class, "isHidden", false, "IS_HIDDEN");
        public final static Property IsAlarm = new Property(9, boolean.class, "isAlarm", false, "IS_ALARM");
        public final static Property IsRecurring = new Property(10, boolean.class, "isRecurring", false, "IS_RECURRING");
        public final static Property RecurrenceRule = new Property(11, String.class, "recurrenceRule", false, "RECURRENCE_RULE");
    }

    private DaoSession daoSession;


    public TaskDao(DaoConfig config) {
        super(config);
    }
    
    public TaskDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TASK\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"NAME\" TEXT NOT NULL ," + // 1: name
                "\"NOTES\" TEXT NOT NULL ," + // 2: notes
                "\"START_TIME\" INTEGER NOT NULL ," + // 3: startTime
                "\"END_TIME\" INTEGER," + // 4: endTime
                "\"DUE_DATE\" INTEGER," + // 5: dueDate
                "\"MARKED_DONE_TIME\" INTEGER," + // 6: markedDoneTime
                "\"IS_DONE\" INTEGER NOT NULL ," + // 7: isDone
                "\"IS_HIDDEN\" INTEGER NOT NULL ," + // 8: isHidden
                "\"IS_ALARM\" INTEGER NOT NULL ," + // 9: isAlarm
                "\"IS_RECURRING\" INTEGER NOT NULL ," + // 10: isRecurring
                "\"RECURRENCE_RULE\" TEXT);"); // 11: recurrenceRule
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TASK\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Task entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getName());
        stmt.bindString(3, entity.getNotes());
        stmt.bindLong(4, entity.getStartTime().getTime());
 
        java.util.Date endTime = entity.getEndTime();
        if (endTime != null) {
            stmt.bindLong(5, endTime.getTime());
        }
 
        java.util.Date dueDate = entity.getDueDate();
        if (dueDate != null) {
            stmt.bindLong(6, dueDate.getTime());
        }
 
        java.util.Date markedDoneTime = entity.getMarkedDoneTime();
        if (markedDoneTime != null) {
            stmt.bindLong(7, markedDoneTime.getTime());
        }
        stmt.bindLong(8, entity.getIsDone() ? 1L: 0L);
        stmt.bindLong(9, entity.getIsHidden() ? 1L: 0L);
        stmt.bindLong(10, entity.getIsAlarm() ? 1L: 0L);
        stmt.bindLong(11, entity.getIsRecurring() ? 1L: 0L);
 
        String recurrenceRule = entity.getRecurrenceRule();
        if (recurrenceRule != null) {
            stmt.bindString(12, recurrenceRule);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Task entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getName());
        stmt.bindString(3, entity.getNotes());
        stmt.bindLong(4, entity.getStartTime().getTime());
 
        java.util.Date endTime = entity.getEndTime();
        if (endTime != null) {
            stmt.bindLong(5, endTime.getTime());
        }
 
        java.util.Date dueDate = entity.getDueDate();
        if (dueDate != null) {
            stmt.bindLong(6, dueDate.getTime());
        }
 
        java.util.Date markedDoneTime = entity.getMarkedDoneTime();
        if (markedDoneTime != null) {
            stmt.bindLong(7, markedDoneTime.getTime());
        }
        stmt.bindLong(8, entity.getIsDone() ? 1L: 0L);
        stmt.bindLong(9, entity.getIsHidden() ? 1L: 0L);
        stmt.bindLong(10, entity.getIsAlarm() ? 1L: 0L);
        stmt.bindLong(11, entity.getIsRecurring() ? 1L: 0L);
 
        String recurrenceRule = entity.getRecurrenceRule();
        if (recurrenceRule != null) {
            stmt.bindString(12, recurrenceRule);
        }
    }

    @Override
    protected final void attachEntity(Task entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Task readEntity(Cursor cursor, int offset) {
        Task entity = new Task( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // name
            cursor.getString(offset + 2), // notes
            new java.util.Date(cursor.getLong(offset + 3)), // startTime
            cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)), // endTime
            cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)), // dueDate
            cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)), // markedDoneTime
            cursor.getShort(offset + 7) != 0, // isDone
            cursor.getShort(offset + 8) != 0, // isHidden
            cursor.getShort(offset + 9) != 0, // isAlarm
            cursor.getShort(offset + 10) != 0, // isRecurring
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11) // recurrenceRule
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Task entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.getString(offset + 1));
        entity.setNotes(cursor.getString(offset + 2));
        entity.setStartTime(new java.util.Date(cursor.getLong(offset + 3)));
        entity.setEndTime(cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)));
        entity.setDueDate(cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)));
        entity.setMarkedDoneTime(cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)));
        entity.setIsDone(cursor.getShort(offset + 7) != 0);
        entity.setIsHidden(cursor.getShort(offset + 8) != 0);
        entity.setIsAlarm(cursor.getShort(offset + 9) != 0);
        entity.setIsRecurring(cursor.getShort(offset + 10) != 0);
        entity.setRecurrenceRule(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Task entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Task entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Task entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
